{"ast":null,"code":"const initialState = {\n  betList: [{\n    id: \"bau\",\n    pic: \"./img/AnimalBetGameImage/bau.png\",\n    betPoint: 0\n  }, {\n    id: \"ca\",\n    pic: \"./img/AnimalBetGameImage/ca.png\",\n    betPoint: 0\n  }, {\n    id: \"cua\",\n    pic: \"./img/AnimalBetGameImage/cua.png\",\n    betPoint: 0\n  }, {\n    id: \"ga\",\n    pic: \"./img/AnimalBetGameImage/ga.png\",\n    betPoint: 0\n  }, {\n    id: \"nai\",\n    pic: \"./img/AnimalBetGameImage/nai.png\",\n    betPoint: 0\n  }, {\n    id: \"tom\",\n    pic: \"./img/AnimalBetGameImage/tom.png\",\n    betPoint: 0\n  }],\n  totalPoint: 1000,\n  diceArray: [{\n    id: \"ga\",\n    pic: \"./img/AnimalBetGameImage/bau.png\"\n  }, {\n    id: \"nai\",\n    pic: \"./img/AnimalBetGameImage/cua.png\"\n  }, {\n    id: \"tom\",\n    pic: \"./img/AnimalBetGameImage/nai.png\"\n  }]\n};\nexport const AnimalBetGameReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'BET':\n      {\n        console.log(\"action: \", action);\n        const betListUpdate = [...state.betList];\n        const index = betListUpdate.findIndex(item => item.id === action.betItem.id);\n        if (index !== -1) {\n          if (action.plusMinus && state.totalPoint > 0) {\n            betListUpdate[index].betPoint += 100;\n            state.totalPoint -= 100;\n          } else {\n            if (betListUpdate[index].betPoint > 0) {\n              betListUpdate[index].betPoint -= 100;\n              state.totalPoint += 100;\n            }\n          }\n        }\n        state.betList = betListUpdate;\n        console.log(\"state: \", state);\n        return state;\n      }\n    default:\n      return state;\n  }\n};\n_c = AnimalBetGameReducer;\nvar _c;\n$RefreshReg$(_c, \"AnimalBetGameReducer\");","map":{"version":3,"names":["initialState","betList","id","pic","betPoint","totalPoint","diceArray","AnimalBetGameReducer","state","arguments","length","undefined","action","type","console","log","betListUpdate","index","findIndex","item","betItem","plusMinus","_c","$RefreshReg$"],"sources":["C:/miniProjects/AnimalBet/animalbet/src/redux/reducers/AnimalBetGameReducer.js"],"sourcesContent":["const initialState = {\r\n    betList:[\r\n        {id:\"bau\", pic:\"./img/AnimalBetGameImage/bau.png\", betPoint: 0},\r\n        {id:\"ca\", pic:\"./img/AnimalBetGameImage/ca.png\", betPoint: 0},\r\n        {id:\"cua\", pic:\"./img/AnimalBetGameImage/cua.png\", betPoint: 0},\r\n        {id:\"ga\", pic:\"./img/AnimalBetGameImage/ga.png\", betPoint: 0},\r\n        {id:\"nai\", pic:\"./img/AnimalBetGameImage/nai.png\", betPoint: 0},\r\n        {id:\"tom\", pic:\"./img/AnimalBetGameImage/tom.png\", betPoint: 0},\r\n    ],\r\n    totalPoint: 1000,\r\n    diceArray: [\r\n        {id:\"ga\", pic:\"./img/AnimalBetGameImage/bau.png\"},\r\n        {id:\"nai\", pic:\"./img/AnimalBetGameImage/cua.png\"},\r\n        {id:\"tom\", pic:\"./img/AnimalBetGameImage/nai.png\"},\r\n    ],\r\n}\r\n\r\nexport const AnimalBetGameReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'BET': {\r\n            console.log(\"action: \", action);\r\n\r\n            const betListUpdate = [...state.betList];\r\n            const index = betListUpdate.findIndex(item => item.id === action.betItem.id);\r\n\r\n            if(index!==-1) {\r\n                if(action.plusMinus && state.totalPoint>0){\r\n                    betListUpdate[index].betPoint += 100;\r\n                    state.totalPoint -= 100; \r\n                }else{\r\n                    if(betListUpdate[index].betPoint > 0){\r\n                        betListUpdate[index].betPoint -= 100;\r\n                        state.totalPoint += 100; \r\n                    } \r\n                }\r\n            }\r\n\r\n            state.betList = betListUpdate;\r\n            console.log(\"state: \", state);\r\n            return state;\r\n        }\r\n            \r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACjBC,OAAO,EAAC,CACJ;IAACC,EAAE,EAAC,KAAK;IAAEC,GAAG,EAAC,kCAAkC;IAAEC,QAAQ,EAAE;EAAC,CAAC,EAC/D;IAACF,EAAE,EAAC,IAAI;IAAEC,GAAG,EAAC,iCAAiC;IAAEC,QAAQ,EAAE;EAAC,CAAC,EAC7D;IAACF,EAAE,EAAC,KAAK;IAAEC,GAAG,EAAC,kCAAkC;IAAEC,QAAQ,EAAE;EAAC,CAAC,EAC/D;IAACF,EAAE,EAAC,IAAI;IAAEC,GAAG,EAAC,iCAAiC;IAAEC,QAAQ,EAAE;EAAC,CAAC,EAC7D;IAACF,EAAE,EAAC,KAAK;IAAEC,GAAG,EAAC,kCAAkC;IAAEC,QAAQ,EAAE;EAAC,CAAC,EAC/D;IAACF,EAAE,EAAC,KAAK;IAAEC,GAAG,EAAC,kCAAkC;IAAEC,QAAQ,EAAE;EAAC,CAAC,CAClE;EACDC,UAAU,EAAE,IAAI;EAChBC,SAAS,EAAE,CACP;IAACJ,EAAE,EAAC,IAAI;IAAEC,GAAG,EAAC;EAAkC,CAAC,EACjD;IAACD,EAAE,EAAC,KAAK;IAAEC,GAAG,EAAC;EAAkC,CAAC,EAClD;IAACD,EAAE,EAAC,KAAK;IAAEC,GAAG,EAAC;EAAkC,CAAC;AAE1D,CAAC;AAED,OAAO,MAAMI,oBAAoB,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGT,YAAY;EAAA,IAAEY,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC7D,QAAQC,MAAM,CAACC,IAAI;IACf,KAAK,KAAK;MAAE;QACRC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,MAAM,CAAC;QAE/B,MAAMI,aAAa,GAAG,CAAC,GAAGR,KAAK,CAACP,OAAO,CAAC;QACxC,MAAMgB,KAAK,GAAGD,aAAa,CAACE,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACjB,EAAE,KAAKU,MAAM,CAACQ,OAAO,CAAClB,EAAE,CAAC;QAE5E,IAAGe,KAAK,KAAG,CAAC,CAAC,EAAE;UACX,IAAGL,MAAM,CAACS,SAAS,IAAIb,KAAK,CAACH,UAAU,GAAC,CAAC,EAAC;YACtCW,aAAa,CAACC,KAAK,CAAC,CAACb,QAAQ,IAAI,GAAG;YACpCI,KAAK,CAACH,UAAU,IAAI,GAAG;UAC3B,CAAC,MAAI;YACD,IAAGW,aAAa,CAACC,KAAK,CAAC,CAACb,QAAQ,GAAG,CAAC,EAAC;cACjCY,aAAa,CAACC,KAAK,CAAC,CAACb,QAAQ,IAAI,GAAG;cACpCI,KAAK,CAACH,UAAU,IAAI,GAAG;YAC3B;UACJ;QACJ;QAEAG,KAAK,CAACP,OAAO,GAAGe,aAAa;QAC7BF,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEP,KAAK,CAAC;QAC7B,OAAOA,KAAK;MAChB;IAGA;MACI,OAAOA,KAAK;EACpB;AACJ,CAAC;AAAAc,EAAA,GA7BYf,oBAAoB;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}